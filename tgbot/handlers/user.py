import logging

from aiogram import Router, types, Bot, F
from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery
from tgbot.keyboards.inline import start_keyboard_user
from aiogram.utils.deep_linking import create_start_link
from infrastructure.database.repo.request import RequestsRepo
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
import os
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command

user_router = Router()

photo = FSInputFile("tgbot/Main-Pic.jpg")

caption = ("Unitech Solar ‚Äî –Ü–Ω–∂–µ–Ω–µ—Ä–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è —Å–æ–Ω—è—á–Ω–æ—ó –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏\n"
           "–ø—ñ–¥ –±—É–¥—å-—è–∫—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
           "–ú–∏ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞—î–º–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è ‚Äî –º–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –¥–ª—è –≤–∞—à–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É")


@user_router.message(CommandStart())
@user_router.callback_query(F.data == 'start')
async def start(event: Message | CallbackQuery, bot: Bot, repo: RequestsRepo):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if isinstance(event, Message):
        user_name = event.from_user.username or "–≥–æ—Å—Ç—å"
        await event.answer_photo(
            photo=photo,
            caption=f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n{caption}",
            reply_markup=start_keyboard_user()
        )

    elif isinstance(event, CallbackQuery):
        user_name = event.from_user.username or "–≥–æ—Å—Ç—å"
        await bot.send_photo(
            chat_id=event.message.chat.id,
            photo=photo,
            caption=f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n{caption}",
            reply_markup=start_keyboard_user()
        )
        await bot.answer_callback_query(event.id)


@user_router.callback_query(F.data == "back")
async def about(callback_query: types.CallbackQuery):
    await callback_query.message.answer_photo(photo=photo,
                                              caption=f"{caption}",
                                              reply_markup=start_keyboard_user())
    await callback_query.message.edit_reply_markup()
    await callback_query.message.delete()
    await callback_query.answer()


@user_router.callback_query(F.data == "online")
async def online(callback_query: types.CallbackQuery, bot: Bot):
    user_name = callback_query.from_user.username
    keyboards = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–íi–¥–ø–æ–≤i—Å—Ç–∏ –∫–ªi—î–Ω—Ç—É", url=f"https://t.me/{user_name}")]
        ]
    )
    await bot.send_message(chat_id=-1002185862798,
                           text="üìû –í–∏–∫–ª–∏–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
                           reply_markup=keyboards)


@user_router.message(F.text == "–ê–¥–º–∏–Ω")
async def get_admin_menu(message: types.Message, bot: Bot):
    keyboards = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ë–∞–∑–∞ –î–∞–Ω–Ω–∏—Ö", callback_data="database")],
            [InlineKeyboardButton(text="–†–æ–∑—Å–∏–ª–∞–Ω–Ω—è", callback_data="send")]
        ]
    )
    await message.bot.send_message(chat_id=-1002185862798, text="–ú–µ–Ω—é –ê–¥–ºi–Ωi—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboards)


@user_router.callback_query(F.data == "database")
async def get_database(callback: types.CallbackQuery, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–∑–∞ –î–∞–Ω–Ω–∏—Ö". –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (user_id –∏ username) –≤ txt-—Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        users = await repo.count_users.count_users()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if not users:
            await callback.message.answer("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list = "\n".join([f"{user_id} - {username or 'No username'}" for user_id, username in users])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        file_path = "users_database.txt"
        with open(file_path, "w", encoding="utf-8") as file:
            file.write("–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:\n\n")
            file.write(user_list)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        file_to_send = FSInputFile(file_path)
        await callback.message.answer_document(file_to_send, caption="–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {e}")
        await callback.message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ –±–∞–∑–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    finally:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if os.path.exists(file_path):
            os.remove(file_path)


@user_router.callback_query(F.data == "send")
async def broadcast_message(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–æ–∑—Å–∏–ª–∞–Ω–Ω—è". –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    """
    await state.set_state("broadcast")
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è:")

@user_router.message(StateFilter("broadcast"))
async def process_broadcast_message(message: types.Message, state: FSMContext, repo: RequestsRepo, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    # –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_text = message.text

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = await repo.count_users.count_users()  # [(user_id, username), ...]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if not users:
            await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è. –ù–µ–º–∞—î –∫–æ–º—É —Ä–æ–∑—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            await state.clear()
            return

        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        success_count = 0
        fail_count = 0
        for user_id, username in users:
            try:
                await bot.send_message(chat_id=user_id, text=broadcast_text)
                success_count += 1
            except Exception as e:
                logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
                fail_count += 1

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –∏—Ç–æ–≥–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer(
            f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£—Å–ø—ñ—à–Ω–æ: {success_count}\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è: {fail_count}"
        )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
