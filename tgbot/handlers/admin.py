from aiogram import Router, F, types
from aiogram.filters import CommandStart
from aiogram.types import Message
from tgbot.keyboards.inline import admin_kb, back_admin
from aiogram.types import FSInputFile
from tgbot.filters.admin import AdminFilter
from infrastructure.database.repo.request import RequestsRepo
import logging

admin_router = Router()
admin_router.message.filter(AdminFilter())

caption = ("–ñ–µ–ª–∞—é —É–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª–µ—Ç–∞ üïä\n\n"
           "–¢–∏—Ö–æ, —Ç–∏—Ö–æ –ø–æ–ª–∑–∏,\n"
           "–£–ª–∏—Ç–∫–∞, –ø–æ —Å–∫–ª–æ–Ω—É –§—É–¥–∑–∏\n"
           "–í–≤–µ—Ä—Ö, –¥–æ —Å–∞–º—ã—Ö –≤—ã—Å–æ—Ç!")


@admin_router.message(CommandStart())
async def admin_start(message: Message):
    await message.answer_photo(photo=FSInputFile("tgbot/admin.png"),
                               caption=f"{caption}", reply_markup=admin_kb())


@admin_router.callback_query(F.data == "view_requests")
async def view_requests(callback_query: types.CallbackQuery, repo: RequestsRepo):
    try:
        result = await repo.select.select_all_registers()
        formatted_result = '\n\n'.join([f"–ò–º—è: {r.name} –í–æ–∑—Ä–∞—Å—Ç: {r.age}"
                                        f" –û–ø—ã—Ç: {r.expirience}"
                                        f" –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {r.profession}"
                                        f" –ö–æ–Ω—Ç–∞–∫—Ç: {r.contact}" for r in result])

        await callback_query.message.answer(f"–í—Å–µ –∑–∞—è–≤–∫–∏:\n"
                                            f"{formatted_result}", reply_markup=back_admin())
    except Exception as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.{e}', reply_markup=back_admin())
    finally:
        await callback_query.answer()


@admin_router.callback_query(F.data == "view_users")
async def view_users(callback_query: types.CallbackQuery, repo: RequestsRepo):
    try:
        result = await repo.count_users.count_users()
        res = len(result)
        await callback_query.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {res}", reply_markup=back_admin())
    except Exception as e:
        await callback_query.message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.{e}', reply_markup=back_admin())
    finally:
        await callback_query.answer()


@admin_router.callback_query(F.data == "back_admin")
async def back(callback_query: types.CallbackQuery):
    await callback_query.message.answer_photo(photo=FSInputFile("tgbot/admin.png"),
                                              caption=f"{caption}", reply_markup=admin_kb())
    await callback_query.message.edit_reply_markup()
    await callback_query.answer()
